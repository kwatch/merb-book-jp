.EN	#MVC

.EN	MVC is an acronym that stands for Model, View, Controller.
.EN	It describes a form of web-application structuring that is easy to test and maintain because it separates business logic, server logic, and content generation.
.EN	This is the structure of the standard Merb app that is generated by the '<tt>merb-gen app</tt>' command.
.EN	It is also the structure used by Rails, CakePHP, Django, and many other popular web-development frameworks.

.EN	To develop in Merb effectively, it is important that one understands both how the MVC structure works, and the most effective way to work with it.
.EN	This chapter will discuss the overall framework; the following three chapters will look at each piece in detail.

.EN	[Models](/getting-started/models) are the core of the framework.  
.EN	They are responsible for the business logic of your application, and in Merb, they are most often associated with database access through an ORM such as DataMapper or Active Record.
.EN	Sometimes models are used with an ORM as nothing more than a wrapper for a database table.
.EN	However, it is generally considered a best practice to have 'fat' models.
.EN	That means the model classes are where you should keep things such as data relationships and methods for any non-trivial piece of data retrieval or manipulation.
.EN	Models are the core of the framework.
.EN	They are responsible for the business logic of your application.
.EN	In Merb, they are most often associated with database access through an ORM such as DataMapper or ActiveRecord.

.EN	[Views](/getting-started/views) are the glitzy outer shell of an application.  
.EN	Views are responsible for generating the actual content(HTML, XML, JSON) returned by a request.
.EN	Most commonly, views are written in a templating format such as [Erb](http://en.wikipedia.org/wiki/ERuby) (embedded Ruby) or [Haml](http://haml.hamptoncatlin.com/).
.EN	Wise developers will attempt to put as little code as possible into their Views.

.EN	[Controllers](/getting-started/controllers) deal with taking an incoming request and turning it into a response.  
.EN	They are responsible for interpreting the incoming request, getting instances of the needed Models, and passing this information along to the View.
.EN	Novice users are often tempted to add lots of code into the controller layer, but this leads to brittle and hard to test code.
.EN	Instead, developers are well advised to keep their controllers as 'skinny' as possible by pushing code that does not directly relate to the request/response cycle (or the gathering of data) into the Model.

.EN	In the default Merb application, the code for all three of these pieces is found in folders of the same name under the '<tt>app</tt>' directory.
.EN	In the next chapters, we will look at how Merb implements each of these parts.  
.EN	Controllers deal with taking an incoming request and turning it into a response.
.EN	They are responsible for interpreting the incoming request, getting instances of the needed Models, and passing this information along to the View.

.EN	Novice users are often tempted to add lots of code into the controller layer, but this leads to code that is brittle and hard to test.
.EN	Instead, developers are well advised to keep their controllers as 'skinny' as possible by pushing code that does not directly relate to the request/response cycle (or the gathering of data) into the Model.