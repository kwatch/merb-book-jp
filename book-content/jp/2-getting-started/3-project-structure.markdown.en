.EN	# Project structure
.EN	The typical structure of a new Merb app (generated with <tt>merb-gen app</tt>) will look something like this:

.EN	    Application directory (Merb.root)
.EN	      - app
.EN	        - controllers
.EN	        - helpers
.EN	        - models
.EN	        - views
.EN	          - exceptions
.EN	          - layout
.EN	      - autotest
.EN	      - config
.EN	        - environments
.EN	      - doc
.EN	      - gems
.EN	      - merb
.EN	      - public
.EN	        - images
.EN	        - javascripts
.EN	        - stylesheets
.EN	      - spec
.EN	      - tasks

.EN	Here's a brief rundown of each directory and its purpose.

.EN	## app
.EN	This directory is where you'll spend most of your time, as it contains the "guts" of your Merb application.

.EN	### controllers
.EN	All of your application's controllers are stored here (no surprise there).
.EN	Controllers are typically named in pluralized form.
.EN	For example, if you have a "<tt>Page</tt>" model, the controller file would most likely be called <tt>pages.rb</tt>.
.EN	This is simply a convention, however; you're free to name your controllers whatever you like.
.EN	See the [controllers](/getting-started/controllers) section for more information.

.EN	### models
.EN	This directory contains your model classes.
.EN	These classes typically serve as your [ORM](http://en.wikipedia.org/wiki/Object-relational_mapping)s, which provide object-oriented access to your database tables.
.EN	See the [models](/getting-started/models) section for more information.

.EN	### views
.EN	Any templates will be stored here.
.EN	By default, this directory contains <tt>exceptions</tt> and <tt>layout</tt> subdirectories.
.EN	The <tt>exceptions</tt> directory stores templates which are generally related to HTTP errors.
.EN	For example, a fresh Merb app will contain a <tt>not_found.html.{erb,haml}</tt>, which corresponds to the 404 HTTP status code.
.EN	The <tt>layout</tt> directory contains overall application templates, into which action templates can be rendered.
.EN	The default application layout file is called <tt>application.html.{erb,haml}</tt>.
.EN	See the [views](/getting-started/views) section for more information.

.EN	## config
.EN	Yep, you guessed it.
.EN	Merb configuration files are located here.
.EN	The <tt>router.rb</tt> file contains your application's URL [routes](/getting-started/router), which define the structure, order, and appearance of your URLs.
.EN	Another important file, <tt>init.rb</tt>, handles the base Merb configuration.
.EN	This is where you can configure your ORM, template engine, and testing framework.
.EN	You can also add custom configuration to the <tt>Merb::BootLoader</tt> in its <tt>before_app_loads</tt> and <tt>after_app_loads</tt> blocks.
.EN	Another important file, <tt>dependencies.rb</tt>, is where you can define your application's dependencies: other libraries or gems that your application requires.
.EN	Any dependency listed in that file will be loaded when your Merb app starts.

.EN	### environments
.EN	Here is where any environment-specific configuration files are located.
.EN	There are a few default (pure Ruby) configuration files; each corresponds to a specific Merb environment (development, production, etc.).

.EN	## gems
.EN	When you get ready to [deploy](/deployment) your application, it's recommended that you [bundle](/deployment/bundle) all of your dependencies inside the application directory.
.EN	The <tt>gems</tt> directory is where these packaged dependencies will be stored.
.EN	When you start the Merb application, it will load any gems from this directory, overriding the system-wide gems.

.EN	## public
.EN	Here is where you can store "static" files, such as the <tt>favicon.ico</tt> and <tt>robots.txt</tt> files.

.EN	### images
.EN	Any images that your templates might use should go here.

.EN	### javascripts
.EN	In the default "Merb stack", this directory contains two files: <tt>application.js</tt> and <tt>jquery.js</tt>.
.EN	The default Merb stack comes packaged with the wonderful [jQuery](http://jquery.com/) JavaScript framework.

.EN	If you have relatively small amounts of application-specific JavaScript code, it should go inside the <tt>application.js</tt> file.
.EN	If this proves unwieldy, however, you can add subsidiary files as needed.

.EN	### stylesheets
.EN	In keeping with the separation of concerns, any visual styling should be placed in a stylesheet.
.EN	When you generate a Merb app, it creates a stylesheet file (called <tt>master.css</tt>), which you can customize to your heart's content

.EN	## spec
.EN	If you're using [rspec](http://rspec.info/) as your [testing](/testing-your-application) framework, this directory will contain those tests.
.EN	By default, this directory contains two files: an empty <tt>spec.opts</tt> file, which you can use to add command-line arguments to rspec (add colorized output, etc.) and <tt>spec_helper.rb</tt>, which is where you can customize the actual spec runner (among other things).

.EN	## tasks
.EN	This directory contains Merb's [thor](http://wiki.merbivore.com/faqs/thor) tasks.